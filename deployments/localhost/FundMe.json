{
    "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "abi": [
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "priceFeedAdress",
                    "type": "address"
                }
            ],
            "stateMutability": "nonpayable",
            "type": "constructor"
        },
        {
            "inputs": [],
            "name": "FundMe_NotOwner",
            "type": "error"
        },
        {
            "stateMutability": "payable",
            "type": "fallback"
        },
        {
            "inputs": [],
            "name": "MINIMUM_USD",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "cheaperWithdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "fund",
            "outputs": [],
            "stateMutability": "payable",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "uint256",
                    "name": "index",
                    "type": "uint256"
                }
            ],
            "name": "getFunder",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getOwner",
            "outputs": [
                {
                    "internalType": "address",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getPriceFeed",
            "outputs": [
                {
                    "internalType": "contract AggregatorV3Interface",
                    "name": "",
                    "type": "address"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "getVersion",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [
                {
                    "internalType": "address",
                    "name": "funder",
                    "type": "address"
                }
            ],
            "name": "getaddressToAmountFunded",
            "outputs": [
                {
                    "internalType": "uint256",
                    "name": "",
                    "type": "uint256"
                }
            ],
            "stateMutability": "view",
            "type": "function"
        },
        {
            "inputs": [],
            "name": "withdraw",
            "outputs": [],
            "stateMutability": "nonpayable",
            "type": "function"
        },
        {
            "stateMutability": "payable",
            "type": "receive"
        }
    ],
    "transactionHash": "0x8cdeb8fa88417ebcddf7778f13f4795571c8e88fb5b3a67d6c6098b84790e1ee",
    "receipt": {
        "to": null,
        "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
        "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "transactionIndex": 0,
        "gasUsed": "1104153",
        "logsBloom": "0x
        "blockHash": "0xd0c89f6ee9d511f14423a5495981f098b73702da69673a2f1ca20815b9b8b78c",
        "transactionHash": "0x8cdeb8fa88417ebcddf7778f13f4795571c8e88fb5b3a67d6c6098b84790e1ee",
        "logs": [],
        "blockNumber": 2,
        "cumulativeGasUsed": "1104153",
        "status": 1,
        "byzantium": true
    },
    "args": ["0x5FbDB2315678afecb367f032d93F642f64180aa3"],
    "numDeployments": 1,
    "solcInputHash": "85c10618f0cf26ea7d32346a96c7f8bb",
    "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAdress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe_NotOwner\",\"type\":\"error\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVersion\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getaddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Maria Duarte\",\"details\":\"This implements price feed as our library\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This is a demo of a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe_NotOwner();\\n\\n/// @title A contract for crowd funding\\n/// @author Maria Duarte\\n/// @notice This is a demo of a sample funding contract\\n/// @dev This implements price feed as our library\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] private s_funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address private immutable  i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10 ** 18;\\n\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    modifier onlyOwner {\\n        // require(msg.sender == owner);\\n        if (msg.sender != i_owner) revert FundMe_NotOwner();\\n        _;\\n    }\\n    \\n    constructor(address priceFeedAdress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAdress);\\n    }\\n\\n    receive() external payable {\\n        fund();\\n    }\\n\\n    fallback() external payable {\\n        fund();\\n    }\\n\\n    function fund() public payable {\\n        require(msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n    \\n    function getVersion() public view returns (uint256){\\n        // ETH/USD price feed address of Sepolia Network.\\n        return s_priceFeed.version();\\n    }\\n    \\n\\n    function withdraw() public onlyOwner {\\n        for (uint256 funderIndex=0; funderIndex < s_funders.length; funderIndex++){\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public onlyOwner {\\n        uint256 size = s_funders.length;\\n        address[] memory funders = s_funders;\\n        for (uint256 funderIndex=0; funderIndex < size; funderIndex++){\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool callSuccess, ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function getOwner() public view returns(address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns(address) {\\n        return s_funders[index];\\n    }\\n    \\n    function getaddressToAmountFunded(address funder) public view returns(uint256) {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns(AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n\\n}\\n\\n\\n\",\"keccak256\":\"0x0a9b2304af67430b2653f02e416c5d9655f83612fc2de21ac6ad0e0e624af8b5\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        // Sepolia ETH / USD Address\\n        // https://docs.chain.link/data-feeds/price-feeds/addresses#Sepolia%20Testnet\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n        // or (Both will do the same thing)\\n        // return uint256(answer * 1e10); // 1* 10 ** 10 == 10000000000\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(uint256 ethAmount, AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // or (Both will do the same thing)\\n        // uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18; // 1 * 10 ** 18 == 1000000000000000000\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\",\"keccak256\":\"0x350714a2ea6cc3b12aa690a0697df5d82a2986d90291c123c61e99a808c0a356\",\"license\":\"MIT\"}},\"version\":1}",
    "bytecode": "0x60a06040523480156200001157600080fd5b506040516200141938038062001419833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c61129a6200017f600039600081816103e40152818161067b01526106cb015261129a6000f3fe60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e81461014d5780639e87a5cd14610178578063b60d4288146101a3578063be2693f0146101ad578063d7b4750c146101c457610099565b80630d8e6e2c146100a35780633ccfd60b146100ce5780636b69a592146100e5578063832b1d2c1461011057610099565b3661009957610097610201565b005b6100a1610201565b005b3480156100af57600080fd5b506100b861033b565b6040516100c59190610b5b565b60405180910390f35b3480156100da57600080fd5b506100e36103e2565b005b3480156100f157600080fd5b506100fa610622565b6040516101079190610b5b565b60405180910390f35b34801561011c57600080fd5b5061013760048036038101906101329190610bd9565b61062f565b6040516101449190610b5b565b60405180910390f35b34801561015957600080fd5b50610162610677565b60405161016f9190610c15565b60405180910390f35b34801561018457600080fd5b5061018d61069f565b60405161019a9190610c8f565b60405180910390f35b6101ab610201565b005b3480156101b957600080fd5b506101c26106c9565b005b3480156101d057600080fd5b506101eb60048036038101906101e69190610cd6565b610977565b6040516101f89190610c15565b60405180910390f35b6802b5e3af16b1880000610240600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109bf90919063ffffffff16565b1015610281576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027890610d60565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102cf9190610daf565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156103a557600080fd5b505afa1580156103b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103dd9190610e1a565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610467576040517f10e0797900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156105125760006001828154811061048d5761048c610e47565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061050a90610e76565b91505061046a565b50600067ffffffffffffffff81111561052e5761052d610ebf565b5b60405190808252806020026020018201604052801561055c5781602001602082028036833780820191505090505b5060019080519060200190610572929190610a9b565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161059990610f1f565b60006040518083038185875af1925050503d80600081146105d6576040519150601f19603f3d011682016040523d82523d6000602084013e6105db565b606091505b505090508061061f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061690610f80565b60405180910390fd5b50565b6802b5e3af16b188000081565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461074e576040517f10e0797900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001805490509050600060018054806020026020016040519081016040528092919081815260200182805480156107dc57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610792575b5050505050905060005b8281101561086557600082828151811061080357610802610e47565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061085d90610e76565b9150506107e6565b50600067ffffffffffffffff81111561088157610880610ebf565b5b6040519080825280602002602001820160405280156108af5781602001602082028036833780820191505090505b50600190805190602001906108c5929190610a9b565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516108ec90610f1f565b60006040518083038185875af1925050503d8060008114610929576040519150601f19603f3d011682016040523d82523d6000602084013e61092e565b606091505b5050905080610972576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096990610f80565b60405180910390fd5b505050565b60006001828154811061098d5761098c610e47565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806109cb836109fb565b90506000670de0b6b3a764000085836109e49190610fa0565b6109ee9190611029565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a4457600080fd5b505afa158015610a58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7c91906110d2565b5050509150506402540be40081610a93919061114d565b915050919050565b828054828255906000526020600020908101928215610b14579160200282015b82811115610b135782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610abb565b5b509050610b219190610b25565b5090565b5b80821115610b3e576000816000905550600101610b26565b5090565b6000819050919050565b610b5581610b42565b82525050565b6000602082019050610b706000830184610b4c565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ba682610b7b565b9050919050565b610bb681610b9b565b8114610bc157600080fd5b50565b600081359050610bd381610bad565b92915050565b600060208284031215610bef57610bee610b76565b5b6000610bfd84828501610bc4565b91505092915050565b610c0f81610b9b565b82525050565b6000602082019050610c2a6000830184610c06565b92915050565b6000819050919050565b6000610c55610c50610c4b84610b7b565b610c30565b610b7b565b9050919050565b6000610c6782610c3a565b9050919050565b6000610c7982610c5c565b9050919050565b610c8981610c6e565b82525050565b6000602082019050610ca46000830184610c80565b92915050565b610cb381610b42565b8114610cbe57600080fd5b50565b600081359050610cd081610caa565b92915050565b600060208284031215610cec57610ceb610b76565b5b6000610cfa84828501610cc1565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d4a601b83610d03565b9150610d5582610d14565b602082019050919050565b60006020820190508181036000830152610d7981610d3d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610dba82610b42565b9150610dc583610b42565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610dfa57610df9610d80565b5b828201905092915050565b600081519050610e1481610caa565b92915050565b600060208284031215610e3057610e2f610b76565b5b6000610e3e84828501610e05565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610e8182610b42565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610eb457610eb3610d80565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610f09600083610eee565b9150610f1482610ef9565b600082019050919050565b6000610f2a82610efc565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610f6a600b83610d03565b9150610f7582610f34565b602082019050919050565b60006020820190508181036000830152610f9981610f5d565b9050919050565b6000610fab82610b42565b9150610fb683610b42565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610fef57610fee610d80565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061103482610b42565b915061103f83610b42565b92508261104f5761104e610ffa565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b6110798161105a565b811461108457600080fd5b50565b60008151905061109681611070565b92915050565b6000819050919050565b6110af8161109c565b81146110ba57600080fd5b50565b6000815190506110cc816110a6565b92915050565b600080600080600060a086880312156110ee576110ed610b76565b5b60006110fc88828901611087565b955050602061110d888289016110bd565b945050604061111e88828901610e05565b935050606061112f88828901610e05565b925050608061114088828901611087565b9150509295509295909350565b60006111588261109c565b91506111638361109c565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156111a2576111a1610d80565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156111df576111de610d80565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561121c5761121b610d80565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561125957611258610d80565b5b82820290509291505056fea264697066735822122001a34313648318e2fc1790140b6cea2fd3fa56f9d33981309147bfcd2b59db8064736f6c63430008080033",
    "deployedBytecode": "0x60806040526004361061008a5760003560e01c8063893d20e811610059578063893d20e81461014d5780639e87a5cd14610178578063b60d4288146101a3578063be2693f0146101ad578063d7b4750c146101c457610099565b80630d8e6e2c146100a35780633ccfd60b146100ce5780636b69a592146100e5578063832b1d2c1461011057610099565b3661009957610097610201565b005b6100a1610201565b005b3480156100af57600080fd5b506100b861033b565b6040516100c59190610b5b565b60405180910390f35b3480156100da57600080fd5b506100e36103e2565b005b3480156100f157600080fd5b506100fa610622565b6040516101079190610b5b565b60405180910390f35b34801561011c57600080fd5b5061013760048036038101906101329190610bd9565b61062f565b6040516101449190610b5b565b60405180910390f35b34801561015957600080fd5b50610162610677565b60405161016f9190610c15565b60405180910390f35b34801561018457600080fd5b5061018d61069f565b60405161019a9190610c8f565b60405180910390f35b6101ab610201565b005b3480156101b957600080fd5b506101c26106c9565b005b3480156101d057600080fd5b506101eb60048036038101906101e69190610cd6565b610977565b6040516101f89190610c15565b60405180910390f35b6802b5e3af16b1880000610240600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346109bf90919063ffffffff16565b1015610281576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027890610d60565b60405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546102cf9190610daf565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166354fd4d506040518163ffffffff1660e01b815260040160206040518083038186803b1580156103a557600080fd5b505afa1580156103b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103dd9190610e1a565b905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610467576040517f10e0797900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b6001805490508110156105125760006001828154811061048d5761048c610e47565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061050a90610e76565b91505061046a565b50600067ffffffffffffffff81111561052e5761052d610ebf565b5b60405190808252806020026020018201604052801561055c5781602001602082028036833780820191505090505b5060019080519060200190610572929190610a9b565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161059990610f1f565b60006040518083038185875af1925050503d80600081146105d6576040519150601f19603f3d011682016040523d82523d6000602084013e6105db565b606091505b505090508061061f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061690610f80565b60405180910390fd5b50565b6802b5e3af16b188000081565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461074e576040517f10e0797900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006001805490509050600060018054806020026020016040519081016040528092919081815260200182805480156107dc57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610792575b5050505050905060005b8281101561086557600082828151811061080357610802610e47565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061085d90610e76565b9150506107e6565b50600067ffffffffffffffff81111561088157610880610ebf565b5b6040519080825280602002602001820160405280156108af5781602001602082028036833780820191505090505b50600190805190602001906108c5929190610a9b565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516108ec90610f1f565b60006040518083038185875af1925050503d8060008114610929576040519150601f19603f3d011682016040523d82523d6000602084013e61092e565b606091505b5050905080610972576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096990610f80565b60405180910390fd5b505050565b60006001828154811061098d5761098c610e47565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806109cb836109fb565b90506000670de0b6b3a764000085836109e49190610fa0565b6109ee9190611029565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a4457600080fd5b505afa158015610a58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7c91906110d2565b5050509150506402540be40081610a93919061114d565b915050919050565b828054828255906000526020600020908101928215610b14579160200282015b82811115610b135782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610abb565b5b509050610b219190610b25565b5090565b5b80821115610b3e576000816000905550600101610b26565b5090565b6000819050919050565b610b5581610b42565b82525050565b6000602082019050610b706000830184610b4c565b92915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610ba682610b7b565b9050919050565b610bb681610b9b565b8114610bc157600080fd5b50565b600081359050610bd381610bad565b92915050565b600060208284031215610bef57610bee610b76565b5b6000610bfd84828501610bc4565b91505092915050565b610c0f81610b9b565b82525050565b6000602082019050610c2a6000830184610c06565b92915050565b6000819050919050565b6000610c55610c50610c4b84610b7b565b610c30565b610b7b565b9050919050565b6000610c6782610c3a565b9050919050565b6000610c7982610c5c565b9050919050565b610c8981610c6e565b82525050565b6000602082019050610ca46000830184610c80565b92915050565b610cb381610b42565b8114610cbe57600080fd5b50565b600081359050610cd081610caa565b92915050565b600060208284031215610cec57610ceb610b76565b5b6000610cfa84828501610cc1565b91505092915050565b600082825260208201905092915050565b7f596f75206e65656420746f207370656e64206d6f726520455448210000000000600082015250565b6000610d4a601b83610d03565b9150610d5582610d14565b602082019050919050565b60006020820190508181036000830152610d7981610d3d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610dba82610b42565b9150610dc583610b42565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610dfa57610df9610d80565b5b828201905092915050565b600081519050610e1481610caa565b92915050565b600060208284031215610e3057610e2f610b76565b5b6000610e3e84828501610e05565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000610e8182610b42565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610eb457610eb3610d80565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610f09600083610eee565b9150610f1482610ef9565b600082019050919050565b6000610f2a82610efc565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610f6a600b83610d03565b9150610f7582610f34565b602082019050919050565b60006020820190508181036000830152610f9981610f5d565b9050919050565b6000610fab82610b42565b9150610fb683610b42565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610fef57610fee610d80565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061103482610b42565b915061103f83610b42565b92508261104f5761104e610ffa565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b6110798161105a565b811461108457600080fd5b50565b60008151905061109681611070565b92915050565b6000819050919050565b6110af8161109c565b81146110ba57600080fd5b50565b6000815190506110cc816110a6565b92915050565b600080600080600060a086880312156110ee576110ed610b76565b5b60006110fc88828901611087565b955050602061110d888289016110bd565b945050604061111e88828901610e05565b935050606061112f88828901610e05565b925050608061114088828901611087565b9150509295509295909350565b60006111588261109c565b91506111638361109c565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04821160008413600084131616156111a2576111a1610d80565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156111df576111de610d80565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561121c5761121b610d80565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561125957611258610d80565b5b82820290509291505056fea264697066735822122001a34313648318e2fc1790140b6cea2fd3fa56f9d33981309147bfcd2b59db8064736f6c63430008080033",
    "devdoc": {
        "author": "Maria Duarte",
        "details": "This implements price feed as our library",
        "kind": "dev",
        "methods": {},
        "title": "A contract for crowd funding",
        "version": 1
    },
    "userdoc": {
        "kind": "user",
        "methods": {},
        "notice": "This is a demo of a sample funding contract",
        "version": 1
    },
    "storageLayout": {
        "storage": [
            {
                "astId": 59,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_addressToAmountFunded",
                "offset": 0,
                "slot": "0",
                "type": "t_mapping(t_address,t_uint256)"
            },
            {
                "astId": 62,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_funders",
                "offset": 0,
                "slot": "1",
                "type": "t_array(t_address)dyn_storage"
            },
            {
                "astId": 74,
                "contract": "contracts/FundMe.sol:FundMe",
                "label": "s_priceFeed",
                "offset": 0,
                "slot": "2",
                "type": "t_contract(AggregatorV3Interface)45"
            }
        ],
        "types": {
            "t_address": {
                "encoding": "inplace",
                "label": "address",
                "numberOfBytes": "20"
            },
            "t_array(t_address)dyn_storage": {
                "base": "t_address",
                "encoding": "dynamic_array",
                "label": "address[]",
                "numberOfBytes": "32"
            },
            "t_contract(AggregatorV3Interface)45": {
                "encoding": "inplace",
                "label": "contract AggregatorV3Interface",
                "numberOfBytes": "20"
            },
            "t_mapping(t_address,t_uint256)": {
                "encoding": "mapping",
                "key": "t_address",
                "label": "mapping(address => uint256)",
                "numberOfBytes": "32",
                "value": "t_uint256"
            },
            "t_uint256": {
                "encoding": "inplace",
                "label": "uint256",
                "numberOfBytes": "32"
            }
        }
    }
}
